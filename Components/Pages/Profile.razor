@page "/profile"

@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FluentValidation
@using FluentValidation.Results
@using MudBlazor

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject TestContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>登録情報</PageTitle>
<MudSnackbarProvider />
<MudText Typo="Typo.h4" GutterBottom="true">登録情報</MudText>

@if (flag)
{
    <MudAlert Severity="MudBlazor.Severity.Warning">
        通園登録がされていません。
        <MudLink Href="/register" Typo="Typo.body2" Color="Color.Primary">
            登録はこちら。
        </MudLink>
    </MudAlert>
}
else
{
    <MudStack Spacing="2">

        @* 基本情報表示 *@
        <MudStack Spacing="2">
            <MudText Typo="Typo.h5">基本情報</MudText>
            <MudText Typo="Typo.body1">作成日 @parentModel.CreatedAt</MudText>
            <MudText Typo="Typo.body1">名前 @parentModel.Name</MudText>
            <MudText Typo="Typo.body1">電話番号 @parentModel.HomePhoneNumber</MudText>
            <MudText Typo="Typo.body1">メールアドレス @parentModel.EmailAddress</MudText>
            <MudText Typo="Typo.body1">郵便番号 @parentModel.PostalCo</MudText>
            <MudText Typo="Typo.body1">郵便番号 @parentModel.CurrentAddress</MudText>
            <MudText Typo="Typo.body1">地区名 @parentModel.DistrictName</MudText>
        </MudStack>
        <br />

        @* 緊急連絡先 *@
        <MudText Typo="Typo.h5">緊急連絡先</MudText>
        <MudStack Spacing="2">
            @foreach (var contact in emergencyModels)
            {
                <MudText Typo="Typo.h6" GutterBottom="true">連絡先: @contact.Rank</MudText>
                <MudText Typo="Typo.body1">続柄 @contact.Relation</MudText>
                <MudText Typo="Typo.body1">種別 @contact.Type</MudText>
                <MudText Typo="Typo.body1">tel @contact.Tel</MudText>

            }
        </MudStack>
        <br />

        @* 子供情報 *@
        <MudText Typo="Typo.h5">子供情報</MudText>
        <MudStack Spacing="2">
        @foreach (var child in childModels)
        {
            <MudText Typo="Typo.h6" GutterBottom="true">お子様情報 @child.Rank</MudText>
            <MudText Typo="Typo.body1">お名前 @child.Name</MudText>
            <MudText Typo="Typo.body1">誕生日 @child.Birthday</MudText>
            <MudText Typo="Typo.body1">お名前 @child.AllergyInfo</MudText>
            <MudText Typo="Typo.body1">備考 @child.Notes</MudText>
        }
        </MudStack>
        <br />
    </MudStack>
}

@code {

    // 初期化
    public string usernameCached = string.Empty;
    public string emailCached = string.Empty;
    private Parent parentModel = new Parent();
    private List<EmergencyContact> emergencyModels = new List<EmergencyContact>();
    private List<Children> childModels = new List<Children>();
    private int parentId = 0;
    private bool flag = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // 名前の検索
            var givenName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty;
            var surname = user.FindFirst(ClaimTypes.Surname)?.Value ?? string.Empty;
            usernameCached = $"{surname}{givenName}".Trim();
            parentModel.Name = usernameCached;

            // メールアドレスの検索
            emailCached = user.Claims.FirstOrDefault(c => c.Type == "emails")?.Value ?? string.Empty;
            parentModel.EmailAddress = emailCached;

            var existingParent = DbContext.Parents.FirstOrDefault(p => p.EmailAddress == emailCached);
            if (existingParent != null)
            {
                parentModel = existingParent;
                parentId = existingParent.ParentId;
                emergencyModels = DbContext.EmergencyContacts.Where(e => e.ParentId == parentId).ToList();
                childModels = DbContext.Childrens.Where(c => c.ParentId == parentId).ToList();
            }
            else
            {
                flag = true;
            }
        }
    }
}
