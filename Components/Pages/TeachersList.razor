@page "/teacherslist"

@using Azure.Storage.Sas
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FluentValidation
@using FluentValidation.Results
@using MudBlazor
@using Azure.Identity
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Blobs.Specialized

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject TestContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserStateService UserStateService
@inject IConfiguration Configuration
@inject BlobStorageService BlobService

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudCard>
        <MudSelect @bind-Value="inputTeacher.AccessId">
            @foreach (var parent in parents)
            {
                <MudSelectItem Value="parent.EmailAddress">@parent.Name</MudSelectItem>
            }
        </MudSelect>

        <MudCardActions>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Class="ml-auto" OnClick="OnValidSubmit">登録</MudButton>
        </MudCardActions>

    </MudCard>

</MudForm>


@if (teachers == null)
{
    <p>読み込み中</p>
}
else
{
    <MudTable Items="@teachers"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info">

        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>名前</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ChildrenId">@context.TeacherId</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
            </MudTd>
        </RowTemplate>

    </MudTable>
}

@code {

    private Teacher inputTeacher = new();
    private List<Parent> parents = new();

    private List<Teacher>? teachers;
    private bool _loading = false;
    private bool success = false;
    string[] errors = { };
    MudForm form = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            teachers = await DbContext.Teachers.ToListAsync();
            parents = await DbContext.Parents.ToListAsync();

        }
        catch (Exception ex)
        {
            Snackbar.Add($"データの読み込み中にエラーが発生しました: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void OnValidSubmit()
    {
        form.Validate();
        if (form.IsValid && parents != null)
        {
            var parent = parents.Find(x => x.EmailAddress == inputTeacher.AccessId);
            if (parent != null)
            {
                inputTeacher.Name = parent.Name;
                var existingTeacher = DbContext.Teachers
                    .SingleOrDefault(t => t.TeacherId == inputTeacher.TeacherId);

                if (existingTeacher == null)
                {
                    DbContext.Teachers.Add(inputTeacher);
                }
                else
                {
                    DbContext.Entry(existingTeacher).CurrentValues.SetValues(inputTeacher);
                }
            }
        }
        _loading = false;
    }
}