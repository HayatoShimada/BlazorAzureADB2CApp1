@page "/classeslist"

@using Azure.Storage.Sas
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FluentValidation
@using FluentValidation.Results
@using MudBlazor
@using Azure.Identity
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Blobs.Specialized

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject TestContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserStateService UserStateService
@inject IConfiguration Configuration
@inject BlobStorageService BlobService

<MudText Typo="Typo.h5" Class="mb-2">クラス登録</MudText>

<MudCard Class="mb-3">
    <MudCardContent>
        <MudTextField 
            Label="クラス名" 
            HelperText="最大8文字まで。"
            @bind-Value="inputClass.Name"/>
    </MudCardContent>
    <MudCardActions>
        <MudButton 
            ButtonType="ButtonType.Button" 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            Class="ml-auto"
            OnClick="AddClass">
            登録
        </MudButton>
    </MudCardActions>
</MudCard>

@if (classes == null)
{
    <p>読み込み中</p>
}
else
{
    <MudText Typo="Typo.h5" Class="mb-2">クラス一覧</MudText>


    <MudTable Items="@classes"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info">

        <HeaderContent>
            <MudTh>名前</MudTh>
            <MudTh>編集</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudInput @bind-Value="context.Name" />

                <MudButton 
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="() => EditClass(context)">
                    適用
                </MudButton>
                </MudTd>
            <MudTd>
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Secondary" 
                    Class="ml-auto" 
                    OnClick="() => DeleteClass(context)">
                    削除
                </MudButton>
            </MudTd>
        </RowTemplate>

    </MudTable>
}

@code {
    private Class inputClass = new();

    private List<Class>? classes;
    private bool _loading = false;

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            classes = await DbContext.Classes.ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"データの読み込み中にエラーが発生しました: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task AddClass()
    {
        try
        {
            // ClassesId を設定しない
            var result = await DbContext.Classes.AddAsync(inputClass);
            await DbContext.SaveChangesAsync();

            // 追加したクラスをリストに追加
            classes.Add(inputClass);

            // 入力フィールドを初期化
            inputClass = new();
            Snackbar.Add($"クラスを追加しました。", MudBlazor.Severity.Success);
            Navigation.Refresh();
        }
        catch (Exception ex)
        {
            // エラー詳細を Snackbar に表示
            var innerMessage = ex.InnerException != null ? ex.InnerException.Message : "詳細なし";
            Snackbar.Add($"エラー: {ex.Message} - {innerMessage}", MudBlazor.Severity.Error);
            Console.WriteLine($"エラー詳細: {ex}");
        }
    }

    private async Task DeleteClass(Class deleteClass)
    {
        try
        {
            // ClassesId を設定しない
            DbContext.Classes.Remove(deleteClass);
            await DbContext.SaveChangesAsync();

            // 入力フィールドを初期化
            Snackbar.Add($"クラスを削除しました。", MudBlazor.Severity.Success);
            Navigation.Refresh();

            classes = await DbContext.Classes.ToListAsync();
        }
        catch (Exception ex)
        {
            // エラー詳細を Snackbar に表示
            var innerMessage = ex.InnerException != null ? ex.InnerException.Message : "詳細なし";
            Snackbar.Add($"エラー: {ex.Message} - {innerMessage}", MudBlazor.Severity.Error);
            Console.WriteLine($"エラー詳細: {ex}");
        }
    }

    private async Task EditClass(Class editClass)
    {
        try
        {
            // ClassesId を設定しない
            DbContext.Classes.Update(editClass);
            await DbContext.SaveChangesAsync();

            // 入力フィールドを初期化
            Snackbar.Add($"クラスを削除しました。", MudBlazor.Severity.Success);
            Navigation.Refresh();

            classes = await DbContext.Classes.ToListAsync();
        }
        catch (Exception ex)
        {
            // エラー詳細を Snackbar に表示
            var innerMessage = ex.InnerException != null ? ex.InnerException.Message : "詳細なし";
            Snackbar.Add($"エラー: {ex.Message} - {innerMessage}", MudBlazor.Severity.Error);
            Console.WriteLine($"エラー詳細: {ex}");
        }
    }

}
