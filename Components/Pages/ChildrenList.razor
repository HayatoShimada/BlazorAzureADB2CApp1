@page "/childrenlist"

@using Azure.Storage.Sas
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FluentValidation
@using FluentValidation.Results
@using MudBlazor
@using Azure.Identity
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Blobs.Specialized

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject TestContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserStateService UserStateService
@inject IConfiguration Configuration
@inject BlobStorageService BlobService

@if (childrens == null && classes == null)
{
    <p>読み込み中</p>
}
else
{
    <MudTable Items="@childrens"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info">

        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>名前</MudTh>
            <MudTh>クラス</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ChildrenId">@context.ChildId</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <MudSelect T="int?" Value="context.ClassId">
                    @foreach (var c in classes)
                    {
                        <MudSelectItem Value="@c.ClassesId">
                            @c.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudTd>

            <MudTd>
                <MudButton Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="() => EditChildren(context)">
                    適用
                </MudButton>
            </MudTd>
        </RowTemplate>

    </MudTable>

}

@code {

    private List<Class>? classes = new();
    private List<Children>? childrens = new();
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        childrens = null;
        classes = null;
        try
        {
            _loading = true;
            childrens = await DbContext.Childrens.ToListAsync();
            classes = await DbContext.Classes.ToListAsync();

            // `ClassId` が null の場合に初期値を設定
            foreach (var child in childrens)
            {
                if (child.ClassId == null && classes.Count > 0)
                {
                    child.ClassId = classes.First().ClassesId; // 最初のクラスをデフォルトに設定
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"データの読み込み中にエラーが発生しました: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task EditChildren(Children c)
    {
        DbContext.Childrens.Update(c);
        await DbContext.SaveChangesAsync();

        childrens = await DbContext.Childrens.ToListAsync();

    }

}