@page "/"
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorAzureADB2CApp1.Components

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Models.TestContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello</MudText>
@* <MudText Class="mb-8">***幼稚園の登録アプリです!</MudText> *@

@if (string.IsNullOrEmpty(usernameCached))
{
    <MudAlert Severity="Severity.Warning">
    <MudLink Href="MicrosoftIdentity/Account/SignIn" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
        <b>ログインしてください。</b>
        @usernameCached
        @emailCached
    </MudLink>
</MudAlert>

}
else if (!string.IsNullOrEmpty(emailCached) && !isRegister)
{
    <MudAlert Severity="Severity.Warning">
    通園登録がされていません。
    <MudLink Href="/register" Typo="Typo.body2" Color="Color.Primary">
        登録はこちら。
    </MudLink>
</MudAlert>
}
else
{
    <MudAlert Severity="Severity.Success">
        ログイン済みです！ようこそ、@usernameCached さん！
    </MudAlert>
    <MudStack Spacing="2">
        @foreach (var child in DbContext.Childrens.Where(c => c.ParentId == parentId))
        {
            <MudText Typo="Typo.h6">お子様情報 @child.Rank</MudText>
            <MudText Typo="Typo.body2">お名前: @child.Name</MudText>
            <MudText Typo="Typo.body2">>園からの連絡：***あいうえおかきくけこ***</MudText>
        }
    </MudStack>
}

@code {
    public string usernameCached = string.Empty;
    public string emailCached = string.Empty;
    private int parentId = 0;
    private bool isRegister = true;
    private bool flag = false;

    protected override async Task OnInitializedAsync()
    {
        if (flag)
        {
            return;
        }
        flag = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            emailCached = user.Claims.FirstOrDefault(c => c.Type == "emails")?.Value ?? string.Empty;
            var givenName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty;
            var surname = user.FindFirst(ClaimTypes.Surname)?.Value ?? string.Empty;
            usernameCached = $"{surname}{givenName}".Trim();

            var parent = DbContext.Parents.FirstOrDefault(p => p.EmailAddress == emailCached);
            if (parent == null)
            {
                parent = new Parent();
                parent.EmailAddress = emailCached;
                parent.Name = usernameCached;
                DbContext.Parents.Add(parent);
                await DbContext.SaveChangesAsync();
                parentId = parent.ParentId;

            }

            var child = DbContext.Childrens.FirstOrDefault(c => c.ParentId == parent.ParentId);
            if (child == null)
            {
                isRegister = false;
            }
        }
    }
}
