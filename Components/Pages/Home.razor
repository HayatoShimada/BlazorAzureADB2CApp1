@page "/"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorAzureADB2CApp1.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Models.TestContext DbContext

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello, @UserName!</MudText>
<MudText Class="mb-8">***幼稚園の登録アプリです!</MudText>

@if (UserName == "Guest")
{
    <MudAlert Severity="Severity.Normal">
        <MudLink Href="MicrosoftIdentity/Account/SignIn" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
            <b>ログインしてください。</b>
        </MudLink>
    </MudAlert>

}
else if (!IsEmailRegistered && isLogin)
{
    <MudAlert Severity="Severity.Warning">
        通園登録がされていません。
        <MudLink Href="/register" Typo="Typo.body2" Color="Color.Primary">登録はこちら。</MudLink>
    </MudAlert>
}
else
{
    <MudAlert Severity="Severity.Success">
        ログイン済みです！ようこそ、@UserName さん！
    </MudAlert>
}

@code {
    private string UserName { get; set; } = "Guest";
    [CascadingParameter] public bool IsEmailRegistered { get; set; }
    private bool isLogin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            //★(a)
            var givenName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty;
            var surname = user.FindFirst(ClaimTypes.Surname)?.Value ?? string.Empty;
            UserName = $"{givenName} {surname}".Trim();
           
            isLogin = true;
        }

        
    }
}
