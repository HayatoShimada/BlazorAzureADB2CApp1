@page "/"
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorAzureADB2CApp1.Components

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Models.TestContext DbContext
@inject NavigationManager Navigation
@inject ThemeService ThemeService
@inject UserStateService UserStateService


<PageTitle>Home</PageTitle>

<MudStack AlignItems="AlignItems.Center" Spacing="3" Class="pa-3">
    @if (ThemeService.IsDarkMode)
    {
        <MudImage ObjectFit="ObjectFit.Contain" Src="images/hoikun.svg" Alt="hoikun logo" Class="ma-12" />
    }
    else
    {
        <MudImage ObjectFit="ObjectFit.Contain" Src="images/hoikun_light.svg" Alt="hoikun logo" Class="ma-12" />
    }
    <MudText>
        「hoikun」は幼稚園・保育園向けのデータ支援アプリケーションです。
    </MudText>

    @if (string.IsNullOrEmpty(UserStateService.Email))
    {
        <MudAlert Severity="Severity.Warning">
            <MudLink Href="MicrosoftIdentity/Account/SignIn" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                <b>ログインしてください。</b>
            </MudLink>
        </MudAlert>

    }
    else if (!string.IsNullOrEmpty(UserStateService.Email) && !isRegister)
    {
        <MudAlert Severity="Severity.Warning">
            通園登録がされていません。
            <MudLink Href="/register" Typo="Typo.body2" Color="Color.Primary">
                登録はこちら。
            </MudLink>
        </MudAlert>
    }
    else
    {
        <MudAlert Severity="Severity.Success">
            ログイン済みです！ようこそ、@UserStateService.Username さん！
        </MudAlert>
        <MudStack Spacing="2">
            @foreach (Children child in parent.Children)
            {
                <MudText Typo="Typo.h6">お子様情報 @child.Rank</MudText>
                <MudText Typo="Typo.body2">お名前: @child.Name</MudText>
                <MudText Typo="Typo.body2">園からの連絡：***あいうえおかきくけこ*** 2024/12/12</MudText>
                <MudButton Color="Color.Primary">More Info</MudButton>
            }
            <MudButton Color="Color.Primary" OnClick="Login">LINEでログイン</MudButton>
            <MudButton Color="Color.Primary" OnClick="LineSocialAPI">LINEアカウント情報</MudButton>
            <MudText Typo="Typo.body2">@lineProfile</MudText>
        </MudStack>
    }

</MudStack>


@code {
    private bool isRegister = true;
    private int parentId = 1;
    private Parent parent = new();

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
        if(UserStateService.Email != null)
        {
            parent = await DbContext.Parents.FirstOrDefaultAsync(p => p.EmailAddress == UserStateService.Email) ?? new() ;
            if(parent != null && parent.Children != null)
            {
                parentId = parent.ParentId;
                isRegister = true;
            }
            else
            {
                isRegister = false;
            }
        }

    }

    private void Login()
    {
        Navigation.NavigateTo("signin-callback", true);
    }

    private string lineProfile = "";
    private string lineDisplayName = "";
    private string linePictureUrl = "";


    private async Task LineSocialAPI()
    {
        try
        {
            // トークンを確認
            if (string.IsNullOrWhiteSpace(UserStateService.AccessToken))
            {
                Console.WriteLine("アクセストークンが設定されていません。");
                return;
            }

            using var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserStateService.AccessToken);

            var response = await client.GetAsync("https://api.line.me/v2/profile");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"HTTPステータスコード: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"エラー内容: {errorContent}");
                return;
            }

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var profile = System.Text.Json.JsonSerializer.Deserialize<LineProfile>(jsonResponse);

            if (profile != null)
            {
                lineProfile = $"ユーザーID: {profile.UserId}";
                lineDisplayName = profile.DisplayName ?? "表示名なし";
                linePictureUrl = profile.PictureUrl ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"例外発生: {ex.Message}");
        }
    }
    // LINEプロフィールのモデルクラス
    public class LineProfile
    {
        public string? UserId { get; set; }
        public string? DisplayName { get; set; }
        public string? PictureUrl { get; set; }
    }
}


   