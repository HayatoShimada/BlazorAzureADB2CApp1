@page "/parentslist"

@using Azure.Storage.Sas
@using BlazorAzureADB2CApp1.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FluentValidation
@using FluentValidation.Results
@using MudBlazor
@using Azure.Identity
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Blobs.Specialized

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject TestContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserStateService UserStateService
@inject IConfiguration Configuration

<PageTitle>親情報一覧</PageTitle>
<MudSnackbarProvider />
<MudText Typo="Typo.h4" GutterBottom="true">親情報一覧</MudText>

<MudSwitch @bind-Value="canCancelEdit" Color="Color.Primary">編集モード</MudSwitch>

@if (parents == null)
{
    <p>読み込み中</p>
}
else
{
    <MudTable Items="@parents"
    Hover="true"
    Breakpoint="Breakpoint.Sm"
    Loading="@_loading"
    LoadingProgressColor="Color.Info"
    ReadOnly="@ronly"
    CanCancelEdit="@canCancelEdit"
    ApplyButtonPosition="@applyButtonPosition"
    EditButtonPosition="@editButtonPosition"
    EditTrigger="@editTrigger">

        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>名前</MudTh>
            <MudTh>住所</MudTh>
            <MudTh>電話番号</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="parent">
            <MudTd DataLabel="ParentId">@parent.ParentId</MudTd>
            <MudTd DataLabel="Name">@parent.Name</MudTd>
            <MudTd DataLabel="Address">@parent.CurrentAddress</MudTd>
            <MudTd DataLabel="Phone">@parent.HomePhoneNumber</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined"
                Size="Size.Small"
                OnClick="@(() => ShowBtnPress(parent))">
                    @((parent.ShowDetails == true) ? "閉じる" : "子供詳細")
                </MudButton>

                <MudButton Variant="Variant.Outlined"
                Size="Size.Small"
                OnClick="@(() => RoutePress(parent))">
                    @((parent.ShowDetails == true) ? "閉じる" : "通園経路")
                </MudButton>
            </MudTd>
        </RowTemplate>

        <ChildRowContent Context="parent">
            @if (parent.ShowDetails ?? false)
            {
                <MudTr>
                    <td colspan="5">
                        <MudTable Items="@parent.Children"
                        Hover="true"
                        Breakpoint="Breakpoint.Sm"
                        Loading="@_loading"
                        LoadingProgressColor="Color.Info"
                        ReadOnly="@ronly"
                        CanCancelEdit="@canCancelEdit"
                        ApplyButtonPosition="@applyButtonPosition"
                        EditButtonPosition="@editButtonPosition"
                        EditTrigger="@editTrigger">

                            <HeaderContent>
                                <MudTh>ID</MudTh>
                                <MudTh>名前</MudTh>
                                <MudTh>誕生日</MudTh>
                                <MudTh>アレルギー</MudTh>
                            </HeaderContent>

                            <RowTemplate Context="child">
                                <MudTd DataLabel="ChildrenId">@child.ChildId</MudTd>
                                <MudTd DataLabel="Name">@child.Name</MudTd>
                                <MudTd DataLabel="Birthday">@child.Birthday</MudTd>
                                <MudTd DataLabel="AllergyInfo">@child.AllergyInfo</MudTd>
                            </RowTemplate>

                        </MudTable>
                    </td>
                </MudTr>
            }
            @if (parent.ShowMaps ?? false)
            {
                <MudTr>
                    <td colspan="5">
                        @if (_blobFiles.Any())
                        {
                            @foreach (var file in _blobFiles)
                            {
                                <MudStack Row="true" Spacing="2">
                                    <MudImage Src="@file.Url" Width="100" Height="100" />
                                    <MudLink Href="@file.Url" Target="_blank">ダウンロード</MudLink>
                                </MudStack>
                                <MudText>
                                    <MudLink Href="@file.Url" Target="_blank">@file.Name</MudLink>
                                </MudText>
                            }
                        }
                        else if (_isBlobLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else
                        {
                        }
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}


@code {
    private List<Parent>? parents;

    private bool _loading = false;
    private bool ronly = false;
    private bool canCancelEdit = true;

    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;


    protected override async Task OnInitializedAsync()
    {        
        // 親リストを子リストを含めて取得
        parents = await DbContext.Parents
            .Include(p => p.Children) // 子リストを同時にロード
            .ToListAsync();

    }

    private void ShowBtnPress(Parent parent)
    {
        // ShowDetails プロパティをトグル
        parent.ShowDetails = !parent.ShowDetails;

        // State を更新
        StateHasChanged();
    }

    private async void RoutePress(Parent parent)
    {
        // ShowDetails プロパティをトグル
        parent.ShowMaps = !parent.ShowMaps;
        await LoadFilesAsync(parent);
        // State を更新
        StateHasChanged();
    }

    private void LineMessage(Children child)
    {
        // Line 送信処理
        Snackbar.Add("Line 送信処理", MudBlazor.Severity.Info);
    }

    // アップロードファイルの表示ロジック
    private List<BlobFileInfo> _blobFiles = new();
    private bool _isBlobLoading = false;

    private async Task LoadFilesAsync(Parent parent)
    {
        try
        {
            var accountName = Configuration["AzureStorageConfig:AccountName"];
            var containerName = Configuration["AzureStorageConfig:ContainerName"];
            var clientId = Configuration["AzureStorageConfig:ClientId"];

            _isBlobLoading = true;
            string containerEndPoint = string.Format("https://{0}.blob.core.windows.net/{1}", accountName, containerName);

            BlobContainerClient containerClient = new BlobContainerClient(new Uri(containerEndPoint),
                                                                          new ManagedIdentityCredential(clientId));

            // データベースから PhotoLocation を取得
            var routes = await DbContext.Routs
                .Where(r => r.ParentId == parent.ParentId && r.PhotoLocation != null)
                .Select(r => r.PhotoLocation)
                .ToListAsync();

            // BLOB のリストを取得
            var files = new List<BlobFileInfo>();

            await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
            {
                if (routes.Contains(blobItem.Name))
                {
                    var blobClient = containerClient.GetBlobClient(blobItem.Name);

                    // SAS トークンの生成
                    var sasBuilder = new BlobSasBuilder
                        {
                            BlobContainerName = containerName,
                            BlobName = blobItem.Name,
                            Resource = "b", // b は BLOB を意味する
                            ExpiresOn = DateTimeOffset.UtcNow.AddHours(1)
                        };
                    sasBuilder.SetPermissions(BlobSasPermissions.Read);

                    var sasToken = sasBuilder.ToSasQueryParameters(
                        new StorageSharedKeyCredential(accountName, Configuration["AzureStorageConfig:AccountKey"]));

                    // URL に SAS トークンを付与
                    var sasUri = new Uri($"{blobClient.Uri}?{sasToken}");

                    files.Add(new BlobFileInfo
                        {
                            Name = blobItem.Name,
                            Url = sasUri.ToString()
                        });
                }
            }

            _blobFiles = files;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"ファイル一覧の取得中にエラーが発生しました: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            _isBlobLoading = false;
        }
    }

    private class BlobFileInfo
    {
        public string Name { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
    }

}
